#!/usr/bin/env node

/**
 * Module dependencies.
 */
var package = require('../package.json')
  , program = require('commander')
  , async = require('async')
  , path = require('path')
  , http = require('http')
  , ejs = require('ejs')
  , fs = require('fs');

var cwd = process.cwd();
var nv = require('..');

// shortcut
var c = nv.config;

/**
 * CLI
 */
program
  .version(package.version)
  .option('-P, --port <port>', 'port')
  .option('-H, --host <host>', 'host')
  .option('-p, --production', 'production state')
  .option('-o, --output <output>', 'output')
  .option('-l, --lang <lang>', 'lang');

program
  .command('init <engine>')
  .description('initialize an environment')
  .action(init);

program
  .command('page <name> [engine]')
  .description('create page')
  .action(createPage);

program
  .command('compile <name> [engine]')
  .description('compile page')
  .action(compilePage);

program
  .command('block <name> [engine]')
  .description('create block')
  .action(createBlock);

program
  .command('run [options]')
  .description('run the env')
  .action(run);

program
  .command('install <lib>')
  .description('install js lib')
  .action(install);

/**
 * Supported template engines
 */
var supported = ['ejs'];

/**
 * Boilerplates directory path
 */
var bpDir = path.join(__dirname, '../bp/');

/**
 * Shortcut for the path.join
 */
var join = path.join;

/**
 * Check if engine is supported
 */
function checkEngine(engine) {
  if (!~supported.indexOf(engine)) {
    console.error(' \033[90merror\033[39m: `%s` engine is not supported, choose one of: %s',
      engine, supported.join(', '));
    process.exit(1);
  }
}

/**
 * Make an environment
 */
function init(engine) {
  checkEngine(engine);

  var jsRootDir, jsLibsDir;
  var engines = {
    /**
     * Make an EJS environment
     */
    ejs: function(cb) {
      var files = {};
      files[bpDir + 'layout_head.ejs'] = join(c.PAGES_ROOT, 'layout_head.ejs');
      files[bpDir + 'layout_foot.ejs'] = join(c.PAGES_ROOT, 'layout_foot.ejs');
      copyFiles(files, cb);
    }
  };

  var tplConfigPath = join(bpDir, 'config.js');

  async.waterfall([
    function(cb) {
      readFiles([tplConfigPath], cb)
    },
    function(content, cb) {
      var tpl = ejs.compile(content[tplConfigPath]);
      var files = {};

      files[join(cwd, 'config.js')] = tpl({engine: engine});
      writeFiles(files, cb);
    },
    function(cb) {
      lessRootDir = join(c.STATIC_ROOT, '/less');
      jsRootDir = join(c.STATIC_ROOT, '/js');
      jsLibsDir = join(jsRootDir, '/libs');

      createDirs([
        c.PAGES_ROOT
      , c.STATIC_ROOT
      , lessRootDir
      , jsRootDir
      , jsLibsDir
      ], cb);
    },
    function(cb) {
      var files = {};
      files[bpDir + 'package.json'] = join(cwd, 'package.json');
      files[bpDir + 'cmn.json']     = join(c.PAGES_ROOT, 'cmn.json');
      files[bpDir + 'mix.less']     = join(lessRootDir, 'mix.less');
      files[bpDir + 'cmn.less']     = join(lessRootDir, 'cmn.less');
      files[bpDir + 'watch.js']     = join(jsLibsDir, 'watch.js');
      files[bpDir + 'sock.js']      = join(jsLibsDir, 'sock.js');
      files[bpDir + 'less.js']      = join(jsLibsDir, 'less.js');
      copyFiles(files, cb);
    },
    function(cb) {
      engines[engine](cb);
    },
    function(cb) {
      createPage('index', engine, cb);
    }
  ], function(err) {
    if (err) {
      console.error(' \033[90merror\033[39m: ' + err.message);
      process.exit(1);
    }
  });
}

/**
 * Make a page
 */
function createPage(name, engine, cb) {
  loadConfig();

  var dir = join(c.PAGES_ROOT, name);
  engine || (engine = c.TEMPLATE_ENGINE);
  checkEngine(engine);

  async.waterfall([
    function(cb) {
      createDirs([dir], cb);
    },
    function(cb) {
      var files = {};
      files[join(bpDir, 'page.json')]     = join(dir, name + '.json');
      files[join(bpDir, 'page.'+ engine)] = join(dir, name + '.' + engine);
      copyFiles(files, cb);
    }
  ], function(err) {
    if (err) {
      console.error(' \033[90merror\033[39m: ' + err.message);
      process.exit(1);
    }
    typeof(cb) == 'function' && cb();
  });
}

/**
 * Make a page
 */
function createBlock(name, engine) {
  loadConfig();

  engine || (engine = c.TEMPLATE_ENGINE);
  checkEngine(engine);

  var blocksDir = join(c.STATIC_ROOT, '/blocks/');
  var blockDir  = join(blocksDir, '/' + name);
  var imgDir    = join(blockDir, '/img');

  var tplBlockPath = join(bpDir, 'block.' + engine);
  var tplLessPath  = join(bpDir, 'block.less');
  var tplLangPath  = join(bpDir, 'block.po');

  async.waterfall([
    function(cb) {
      createDirs([blocksDir, blockDir, imgDir], cb);
    },
    function(cb) {
      readFiles([tplBlockPath, tplLessPath, tplLangPath], cb);
    },
    function(content, cb) {
      var tplBlock = ejs.compile(content[tplBlockPath]);
      var tplLess = ejs.compile(content[tplLessPath]);
      var tplLang = ejs.compile(content[tplLangPath]);

      var files = {};
      files[join(blockDir, name + '.less')]      = tplLess({name: name});
      files[join(blockDir, name + '.' + engine)] = tplBlock({name: name});

      if (c.LANGUAGES) {
        c.LANGUAGES_LIST.forEach(function(language) {
          files[join(blockDir, name + '.' + language + '.po')] = tplLang();
        });
      }

      writeFiles(files, cb);
    }
  ], function(err) {
    if (err) {
      console.error(' \033[90merror\033[39m: ' + err.message);
      process.exit(1);
    }
  });
}

/**
 * Run the environment
 */
function run() {
  loadConfig()

  var options = {
    host: program.host || '0.0.0.0'
  , port: program.port || '8080'
  };

  nv.server(options, function(err) {
    if (err) {
      console.error(' error: ' + err.message);
      process.exit(1);
    }
    console.log(' env is running on %s:%s', options.host, options.port);
  });
}

/**
 * Compile page
 */
function compilePage(name, engine) {
  loadConfig();

  var dir = join(c.PAGES_ROOT, name);

  engine || (engine = c.TEMPLATE_ENGINE);
  checkEngine(engine);

  var data = {
    page: name
  , lang: program.locale
  };

  if (program.production) {
    data.env = 'production';
  }

  nv.render(data, function(err, html) {
    if (err) throw err;
    var file = program.output || path.join(cwd, name + '.html');
    fs.writeFile(file, html, function(err) {
      if (err) throw err;
    });
  });
}

var LIBS = {
  'jquery': 'http://code.jquery.com/jquery-2.0.3.js'
, 'jquery.transit': 'http://ricostacruz.com/jquery.transit/jquery.transit.js'
};

/**
 * Install js lib
 */
function install(lib) {
  loadConfig();

  if (!LIBS[lib]) {
    console.error(' error: unknown lib "%s"', lib);
    process.exit();
  }

  var jsRootDir = join(c.STATIC_ROOT, '/js');
  var jsLibsDir = join(jsRootDir, '/libs');

  var file = fs.createWriteStream(join(jsLibsDir, lib + '.js'));
  var req = http.get(LIBS[lib], function(res) {
    res.pipe(file);
  });
}

/**
 * Copy file
 */
function copyFile(source, target, cb) {
  var cbCalled = false;
  var rd = fs.createReadStream(source);
  var wr = fs.createWriteStream(target);

  rd.on("error", done);
  wr.on("error", done);
  wr.on("close", function() {
    done();
  });

  rd.pipe(wr);

  function done(err) {
    if (!cbCalled) {
      cb(err);
      cbCalled = true;
    }
  }
}

/**
 * Copy files
 */
function copyFiles(sources, cb) {
  async.forEachSeries(Object.keys(sources), function(source, cb) {
    var target = sources[source];

    fs.exists(target, function(exists) {
      if (exists) return cb();
      copyFile(source, target, function(err) {
        if (err) return cb(err);
        console.log(' \033[90mcreate\033[39m %s', path.relative(cwd, target));
        cb();
      });
    });
  }, cb);
}

/**
 * Read files
 */
function readFiles(sources, cb) {
  var content = {};

  async.forEach(sources, function(source, cb) {
    fs.readFile(source, 'utf8', function(err, cont) {
      if (err) return cb(err);
      content[source] = cont;
      cb();
    });
  }, function(err) {
    if (err) return cb(err);
    cb(null, content);
  });
}

/**
 * Write files
 */
function writeFiles(sources, cb) {
  async.forEachSeries(Object.keys(sources), function(source, cb) {
    var content = sources[source];

    fs.exists(source, function(exists) {
      if (exists) return cb();
      fs.writeFile(source, content, function(err) {
        if (err) return cb();
        console.log(' \033[90mcreate\033[39m %s', path.relative(cwd, source));
        cb();
      });
    });
  }, cb);
}

/**
 * Make dirs
 */
function createDirs(dirs, cb) {
  async.forEachSeries(dirs, function(dir, cb) {
    fs.exists(dir, function(exists) {
      if (exists) return cb();
      fs.mkdir(dir, function(err) {
        if (err) return cb(err);
        console.log(' \033[90mcreate\033[39m %s', path.relative(cwd, dir));
        cb();
      });
    });
  }, cb);
}

/**
 * Configure
 */
function loadConfig() {
  try {
    nv.init(require(path.join(cwd, 'config')));
  } catch (err) {
    console.error(' error: cannot find config file');
  }
}

program.parse(process.argv);